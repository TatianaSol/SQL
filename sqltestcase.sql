REM   Script: Session 09.11
REM   Session 09.11

-- СОЗДАТЬ ТАБЛИЦЫ
-- Покупатели. CUSTOMERS.

CREATE TABLE CUSTOMERS (
"ID" NUMBER(4) NOT NULL,
"NAME" VARCHAR2(30) NOT NULL,
PRIMARY KEY ("ID")
); 

-- Сотрудники. EMPLOYEES.

CREATE TABLE EMPLOYEES (
"ID" NUMBER(4) NOT NULL,
"NAME" VARCHAR2(30) NOT NULL,
"CATEGORY" VARCHAR2(30) NOT NULL,
PRIMARY KEY ("ID")
);
 
-- Чеки. CHECKS.

CREATE TABLE CHECKS (
"ID" NUMBER(4) NOT NULL,
"ID_EMPLOYEE" NUMBER(4) NOT NULL,
"ID_CUSTOMER" NUMBER(4) NOT NULL,
"DATE" DATE NOT NULL,
"AMOUNT" NUMBER(10) NOT NULL,
PRIMARY KEY ("ID")
);
 
-- Продукты. PRODUCTS.

CREATE TABLE PRODUCTS (
"ID" NUMBER(4) NOT NULL,
"NAME" VARCHAR2(15) NOT NULL,
"PRICE" NUMBER(10) NOT NULL,
PRIMARY KEY("ID")
);
 
-- Состав чека. PRODUCT_CHECK.

CREATE TABLE PRODUCT_CHECK (
"ID_CHECK" NUMBER(4) NOT NULL,
"ID_PRODUCT" NUMBER(4) NOT NULL,
"NUMBER" NUMBER(4) NOT NULL
); 

-- ЗАПОЛНИТЬ ТАБЛИЦЫ

INSERT ALL
INTO CUSTOMERS ("ID", "NAME") VALUES (1, 'Sidorov')
INTO CUSTOMERS ("ID", "NAME") VALUES (2, 'Goncharov')
INTO CUSTOMERS ("ID", "NAME") VALUES (3, 'Ivanov')
INTO CUSTOMERS ("ID", "NAME") VALUES (4, 'Popov')
SELECT * FROM DUAL;
 
INSERT ALL
INTO EMPLOYEES ("ID", "NAME", "CATEGORY") VALUES (101, 'Konovalov', 'Junior')
INTO EMPLOYEES ("ID", "NAME", "CATEGORY") VALUES (102, 'Petrov', 'Middle')
INTO EMPLOYEES ("ID", "NAME", "CATEGORY") VALUES (103, 'Shipulin', 'Junior')
INTO EMPLOYEES ("ID", "NAME", "CATEGORY") VALUES (104, 'Golovin', 'Junior')
INTO EMPLOYEES ("ID", "NAME", "CATEGORY") VALUES (105, 'Titov', 'Senior')
INTO EMPLOYEES ("ID", "NAME", "CATEGORY") VALUES (106, 'Golikova', 'Team lead')
SELECT * FROM DUAL;
 
INSERT ALL
INTO PRODUCTS ("ID", "NAME", "PRICE") VALUES (1001, 'White bread', 50)
INTO PRODUCTS ("ID", "NAME", "PRICE") VALUES (1002, 'Black bread', 44)
INTO PRODUCTS ("ID", "NAME", "PRICE") VALUES (1003, 'Tea', 100)
INTO PRODUCTS ("ID", "NAME", "PRICE") VALUES (1004, 'Sugar', 70)
INTO PRODUCTS ("ID", "NAME", "PRICE") VALUES (1005, 'Salt', 10)
SELECT * FROM DUAL;
 
INSERT ALL
INTO PRODUCT_CHECK ("ID_CHECK", "ID_PRODUCT", "NUMBER") VALUES (1, 1001, 2)
INTO PRODUCT_CHECK ("ID_CHECK", "ID_PRODUCT", "NUMBER") VALUES (1, 1005, 1)
INTO PRODUCT_CHECK ("ID_CHECK", "ID_PRODUCT", "NUMBER") VALUES (1, 1004, 5)
INTO PRODUCT_CHECK ("ID_CHECK", "ID_PRODUCT", "NUMBER") VALUES (2, 1002, 1)
INTO PRODUCT_CHECK ("ID_CHECK", "ID_PRODUCT", "NUMBER") VALUES (3, 1003, 10)
INTO PRODUCT_CHECK ("ID_CHECK", "ID_PRODUCT", "NUMBER") VALUES (3, 1004, 4)
INTO PRODUCT_CHECK ("ID_CHECK", "ID_PRODUCT", "NUMBER") VALUES (3, 1001, 1)
INTO PRODUCT_CHECK ("ID_CHECK", "ID_PRODUCT", "NUMBER") VALUES (4, 1002, 3)
INTO PRODUCT_CHECK ("ID_CHECK", "ID_PRODUCT", "NUMBER") VALUES (5, 1004, 2)
INTO PRODUCT_CHECK ("ID_CHECK", "ID_PRODUCT", "NUMBER") VALUES (6, 1001, 1)
INTO PRODUCT_CHECK ("ID_CHECK", "ID_PRODUCT", "NUMBER") VALUES (6, 1002, 1)
SELECT * FROM DUAL;
 
alter session set nls_date_format = 'DD.MM.YYYY';

TRUNCATE TABLE CHECKS

INSERT ALL
INTO CHECKS ("ID", "ID_EMPLOYEE", "ID_CUSTOMER", "DATE", "AMOUNT") VALUES (1, 102, 1, TO_DATE('01.04.2021', 'DD.MM.YYYY'), 460)
INTO CHECKS ("ID", "ID_EMPLOYEE", "ID_CUSTOMER", "DATE", "AMOUNT") VALUES (2, 104, 2, TO_DATE('01.04.2021', 'DD.MM.YYYY'), 44)
INTO CHECKS ("ID", "ID_EMPLOYEE", "ID_CUSTOMER", "DATE", "AMOUNT") VALUES (3, 105, 3, TO_DATE('02.04.2021', 'DD.MM.YYYY'), 1330)
INTO CHECKS ("ID", "ID_EMPLOYEE", "ID_CUSTOMER", "DATE", "AMOUNT") VALUES (4, 106, 2, TO_DATE('03.04.2021', 'DD.MM.YYYY'), 132)
INTO CHECKS ("ID", "ID_EMPLOYEE", "ID_CUSTOMER", "DATE", "AMOUNT") VALUES (5, 101, 4, TO_DATE('03.04.2021', 'DD.MM.YYYY'), 140)
INTO CHECKS ("ID", "ID_EMPLOYEE", "ID_CUSTOMER", "DATE", "AMOUNT") VALUES (6, 104, 1, TO_DATE('04.04.2021', 'DD.MM.YYYY'), 94)
SELECT * FROM DUAL;
 
-- НАПИСАТЬ ЗАПРОСЫ
-- 1.	Имена сотрудников, у которых предпоследняя буква О
SELECT NAME AS "Имена сотрудников" FROM EMPLOYEES WHERE NAME LIKE '%o_'; 
 
-- 2.	Названия товаров, которые состоят больше, чем из 3 букв, при этом хотя бы одна буква в слове = e
SELECT NAME AS "Названия товаров" FROM PRODUCTS WHERE LENGTH(NAME) > 3 AND NAME LIKE '%e%';
 
-- 3.	Все товары, которые продал сотрудник Титов (Titov)
SELECT PRODUCTS.NAME AS "Товары, которые продал Титов" 
FROM PRODUCTS, CHECKS, PRODUCT_CHECK, EMPLOYEES
WHERE PRODUCTS.ID = PRODUCT_CHECK.ID_PRODUCT
AND PRODUCT_CHECK.ID_CHECK = CHECKS.ID
AND CHECKS.ID_EMPLOYEE = EMPLOYEES.ID
AND EMPLOYEES.NAME LIKE 'Titov';
 
-- 4.	Вывести имя покупателя, который потратил меньше всего денег
SELECT CUSTOMERS.NAME AS "Покупатель", SUM(CHECKS.AMOUNT) AS "Сумма покупок"
FROM CUSTOMERS, CHECKS
WHERE CUSTOMERS.ID = CHECKS.ID_CUSTOMER
GROUP BY CUSTOMERS.NAME
HAVING SUM(CHECKS.AMOUNT) <= ALL (
SELECT SUM(CHECKS.AMOUNT) FROM CHECKS
GROUP BY CHECKS.ID_CUSTOMER
);
 
-- 5.	Все номера чеков, в которых продавался сахар
SELECT PRODUCT_CHECK.ID_CHECK AS "Номера чеков" 
FROM PRODUCT_CHECK, PRODUCTS
WHERE PRODUCTS.ID = PRODUCT_CHECK.ID_PRODUCT
AND PRODUCTS.NAME LIKE 'Sugar';
 
-- 6.	Вывести название товара и количество товара, которого продали больше всего
SELECT PRODUCTS.NAME AS "Товар", SUM(PRODUCT_CHECK."NUMBER") AS "Всего продано"
FROM PRODUCT_CHECK, PRODUCTS
WHERE PRODUCTS.ID = PRODUCT_CHECK.ID_PRODUCT
GROUP BY PRODUCTS.NAME
HAVING SUM(PRODUCT_CHECK."NUMBER") >= ALL (
SELECT SUM(PRODUCT_CHECK."NUMBER") FROM PRODUCT_CHECK 
GROUP BY PRODUCT_CHECK.ID_PRODUCT
);
 
-- 7.	Первый номер чека, в котором содержался сахар
SELECT MIN(PRODUCT_CHECK.ID_CHECK) AS "Первый номер чека с сахаром" 
FROM PRODUCT_CHECK
WHERE PRODUCT_CHECK.ID_PRODUCT = (
SELECT PRODUCTS.ID FROM PRODUCTS WHERE PRODUCTS.NAME LIKE 'Sugar'
);
 
-- 8.	Найти NAME сотрудников и имя товара, сотрудники которые продали самое большое количество хлеба
SELECT EMPLOYEES.NAME AS "Сотрудник",
SUM(CASE WHEN PRODUCTS.NAME LIKE 'White bread' THEN PRODUCT_CHECK."NUMBER" ELSE 0 END) AS "Продано белого хлеба",
SUM(CASE WHEN PRODUCTS.NAME LIKE 'Black bread' THEN PRODUCT_CHECK."NUMBER" ELSE 0 END) AS "Продано черного хлеба",
SUM(CASE WHEN PRODUCTS.NAME LIKE '%bread%' THEN PRODUCT_CHECK."NUMBER" ELSE 0 END) AS "Продано всего хлеба"
FROM EMPLOYEES, PRODUCTS, PRODUCT_CHECK, CHECKS
WHERE PRODUCTS.ID = PRODUCT_CHECK.ID_PRODUCT
AND EMPLOYEES.ID = CHECKS.ID_EMPLOYEE
AND PRODUCT_CHECK.ID_CHECK = CHECKS.ID
GROUP BY EMPLOYEES.NAME
HAVING SUM(CASE WHEN PRODUCTS.NAME LIKE '%bread%' THEN PRODUCT_CHECK."NUMBER" ELSE 0 END) >= ALL(SELECT SUM(CASE WHEN PRODUCTS.NAME LIKE '%bread%' THEN PRODUCT_CHECK."NUMBER" ELSE 0 END)
FROM EMPLOYEES, PRODUCTS, PRODUCT_CHECK, CHECKS
WHERE PRODUCTS.ID = PRODUCT_CHECK.ID_PRODUCT
AND EMPLOYEES.ID = CHECKS.ID_EMPLOYEE
AND PRODUCT_CHECK.ID_CHECK = CHECKS.ID
GROUP BY EMPLOYEES.NAME
);
 
-- 9.	Сотрудник, который продал товаров на большую сумму
SELECT EMPLOYEES.NAME AS "Сотрудник", SUM(CHECKS.AMOUNT) AS "Всего продал"
FROM EMPLOYEES, CHECKS
WHERE EMPLOYEES.ID = CHECKS.ID_EMPLOYEE
GROUP BY EMPLOYEES.NAME
HAVING SUM(CHECKS.AMOUNT) >= ALL (
SELECT SUM(CHECKS.AMOUNT) FROM CHECKS 
GROUP BY CHECKS.ID_EMPLOYEE
);
 
-- 10.	Вывести номер чека и сумма чека, но сумма чека должна рассчитываться самостоятельно, т.е. не брать сумму из чека
SELECT PRODUCT_CHECK.ID_CHECK AS "Номер чека", SUM(PRODUCT_CHECK."NUMBER"*PRODUCTS.PRICE) AS "Сумма чека"
FROM PRODUCT_CHECK, PRODUCTS
WHERE PRODUCTS.ID = PRODUCT_CHECK.ID_PRODUCT
GROUP BY PRODUCT_CHECK.ID_CHECK
ORDER BY PRODUCT_CHECK.ID_CHECK;
 
-- 11.	Выбрать сотрудников с квалификацией = Junior, у которых сумма всех продаж больше, чем продажи у Team lead
SELECT EMPLOYEES.NAME AS "Сотрудник", SUM(CHECKS.AMOUNT) AS "Всего продал"
FROM EMPLOYEES, CHECKS
WHERE EMPLOYEES.ID = CHECKS.ID_EMPLOYEE
AND EMPLOYEES.CATEGORY LIKE 'Junior'
GROUP BY EMPLOYEES.NAME
HAVING SUM(CHECKS.AMOUNT) >= ALL (
SELECT SUM(CHECKS."AMOUNT") FROM EMPLOYEES, CHECKS
WHERE EMPLOYEES."ID" = CHECKS."ID_EMPLOYEE" 
AND EMPLOYEES."CATEGORY" LIKE 'Team lead'
);
 
-- 12.	Вывести все товары, которые купил Sidorov
SELECT DISTINCT PRODUCTS.NAME AS "Товары, которые купил Сидоров" 
FROM PRODUCTS, CHECKS, CUSTOMERS, PRODUCT_CHECK
WHERE CHECKS.ID_CUSTOMER = CUSTOMERS.ID
AND CHECKS.ID = PRODUCT_CHECK.ID_CHECK
AND PRODUCTS.ID = PRODUCT_CHECK.ID_PRODUCT
AND CUSTOMERS.NAME LIKE 'Sidorov';
